[{"E:\\DjangoEcommerce\\backend\\frontend\\src\\index.js":"1","E:\\DjangoEcommerce\\backend\\frontend\\src\\store.js":"2","E:\\DjangoEcommerce\\backend\\frontend\\src\\reportWebVitals.js":"3","E:\\DjangoEcommerce\\backend\\frontend\\src\\App.js":"4","E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\productReducers.js":"5","E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\userReducers.js":"6","E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\orderReducers.js":"7","E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\cartReducers.js":"8","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Footer.js":"9","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductScreen.js":"10","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\LoginScreen.js":"11","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Header.js":"12","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\HomeScreen.js":"13","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\RegisterScreen.js":"14","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ShippingScreen.js":"15","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\CartScreen.js":"16","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\PaymentScreen.js":"17","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\OrderScreen.js":"18","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\UserListScreen.js":"19","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProfileScreen.js":"20","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\PlaceOrderScreen.js":"21","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\UserEditScreen.js":"22","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductListScreen.js":"23","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductEditScreen.js":"24","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\OrderListScreen.js":"25","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Loader.js":"26","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Message.js":"27","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Rating.js":"28","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\FormContainer.js":"29","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\SearchBox.js":"30","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\ProductCarousel.js":"31","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Paginate.js":"32","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\CheckoutSteps.js":"33","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Product.js":"34","E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\userConstants.js":"35","E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\orderConstants.js":"36","E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\productConstants.js":"37","E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\cartConstants.js":"38","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\cartActions.js":"39","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\productActions.js":"40","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\userActions.js":"41","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\orderActions.js":"42"},{"size":595,"mtime":1637568464592,"results":"43","hashOfConfig":"44"},{"size":2634,"mtime":1638535489111,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"44"},{"size":2244,"mtime":1638877281054,"results":"47","hashOfConfig":"44"},{"size":4349,"mtime":1638535367106,"results":"48","hashOfConfig":"44"},{"size":4345,"mtime":1638294625914,"results":"49","hashOfConfig":"44"},{"size":4469,"mtime":1638411213547,"results":"50","hashOfConfig":"44"},{"size":1547,"mtime":1638093128664,"results":"51","hashOfConfig":"44"},{"size":331,"mtime":1638467789111,"results":"52","hashOfConfig":"44"},{"size":7909,"mtime":1638508490108,"results":"53","hashOfConfig":"44"},{"size":2851,"mtime":1638468829115,"results":"54","hashOfConfig":"44"},{"size":2722,"mtime":1638508151858,"results":"55","hashOfConfig":"44"},{"size":1606,"mtime":1638536419124,"results":"56","hashOfConfig":"44"},{"size":3239,"mtime":1637866765984,"results":"57","hashOfConfig":"44"},{"size":2730,"mtime":1638507880477,"results":"58","hashOfConfig":"44"},{"size":3776,"mtime":1638508190493,"results":"59","hashOfConfig":"44"},{"size":1519,"mtime":1638508115839,"results":"60","hashOfConfig":"44"},{"size":7585,"mtime":1638540249256,"results":"61","hashOfConfig":"44"},{"size":3472,"mtime":1638507960779,"results":"62","hashOfConfig":"44"},{"size":5606,"mtime":1638536377097,"results":"63","hashOfConfig":"44"},{"size":5646,"mtime":1638508258014,"results":"64","hashOfConfig":"44"},{"size":3437,"mtime":1638507927186,"results":"65","hashOfConfig":"44"},{"size":4919,"mtime":1638508304157,"results":"66","hashOfConfig":"44"},{"size":6865,"mtime":1638369430155,"results":"67","hashOfConfig":"44"},{"size":3419,"mtime":1638410787901,"results":"68","hashOfConfig":"44"},{"size":475,"mtime":1638467974394,"results":"69","hashOfConfig":"44"},{"size":243,"mtime":1637603188503,"results":"70","hashOfConfig":"44"},{"size":1900,"mtime":1637414383005,"results":"71","hashOfConfig":"44"},{"size":396,"mtime":1637846986058,"results":"72","hashOfConfig":"44"},{"size":1112,"mtime":1638456663216,"results":"73","hashOfConfig":"44"},{"size":1309,"mtime":1638534297288,"results":"74","hashOfConfig":"44"},{"size":928,"mtime":1638464321121,"results":"75","hashOfConfig":"44"},{"size":1769,"mtime":1638467405874,"results":"76","hashOfConfig":"44"},{"size":904,"mtime":1637464740795,"results":"77","hashOfConfig":"44"},{"size":1510,"mtime":1638290761720,"results":"78","hashOfConfig":"44"},{"size":1264,"mtime":1638411118895,"results":"79","hashOfConfig":"44"},{"size":1528,"mtime":1638509734269,"results":"80","hashOfConfig":"44"},{"size":295,"mtime":1638092793762,"results":"81","hashOfConfig":"44"},{"size":1352,"mtime":1638008428612,"results":"82","hashOfConfig":"44"},{"size":6343,"mtime":1638535871624,"results":"83","hashOfConfig":"44"},{"size":7857,"mtime":1638293540668,"results":"84","hashOfConfig":"44"},{"size":6295,"mtime":1638411442022,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kizn18",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},"E:\\DjangoEcommerce\\backend\\frontend\\src\\index.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\store.js",["191"],"import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { productListReducer, \r\n        productDetailsReducer, \r\n        productDeleteReducer,\r\n        productCreateReducer,\r\n        productUpdateReducer,\r\n        productReviewCreateReducer, \r\n        productTopRatedReducer} from './reducers/productReducers'\r\n\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { userLoginReducer, userRegisterReducer, \r\n         userDetailsReducer, \r\n         userUpdateProfileReducer, \r\n         userListReducer,\r\n         userDeleteReducer,\r\n         userUpdateReducer } from './reducers/userReducers'\r\n\r\nimport { orderCreateReducer, \r\n        orderDetailsReducer, \r\n        orderPayReducer, \r\n        orderListMyReducer,\r\n        orderListReducer,\r\n        orderDeliverReducer } \r\n        from './reducers/orderReducers'\r\n\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productDelete: productDeleteReducer,\r\n    productCreate: productCreateReducer,\r\n    productUpdate: productUpdateReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n    productTopRated: productTopRatedReducer,\r\n\r\n\r\n    cart: cartReducer,\r\n\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    userList: userListReducer,\r\n    userDelete: userDeleteReducer,\r\n    userUpdate: userUpdateReducer,\r\n\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListMy: orderListMyReducer,\r\n    orderList: orderListReducer,\r\n    orderList: orderListReducer,\r\n    orderDeliver: orderDeliverReducer\r\n    \r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\r\n        JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\r\n        JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\nconst shippingAddressInfoFromStorage = localStorage.getItem('shippingAddress') ?\r\n        JSON.parse(localStorage.getItem('shippingAddress')) : {}        \r\n\r\nconst initialState = {\r\n    cart:{cartItems: cartItemsFromStorage,\r\n          shippingAddress: shippingAddressInfoFromStorage},\r\n    userLogin:{userInfo: userInfoFromStorage}\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, \r\n                         composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\n\r\nexport default store\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\reportWebVitals.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\App.js",["192"],"E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\productReducers.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\userReducers.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\orderReducers.js",["193"],"import {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_CREATE_RESET,\r\n\r\n  ORDER_DETAILS_REQUEST,\r\n  ORDER_DETAILS_SUCCESS,\r\n  ORDER_DETAILS_FAIL,\r\n\r\n  ORDER_PAY_REQUEST,\r\n  ORDER_PAY_SUCCESS,\r\n  ORDER_PAY_FAIL,\r\n  ORDER_PAY_RESET,\r\n\r\n  ORDER_LIST_MY_REQUEST,\r\n  ORDER_LIST_MY_SUCCESS,\r\n  ORDER_LIST_MY_FAIL,\r\n  ORDER_LIST_MY_RESET,\r\n\r\n  ORDER_LIST_REQUEST,\r\n  ORDER_LIST_SUCCESS,\r\n  ORDER_LIST_FAIL,\r\n  ORDER_LIST_RESET,\r\n\r\n  ORDER_DELIVER_REQUEST,\r\n  ORDER_DELIVER_SUCCESS,\r\n  ORDER_DELIVER_FAIL,\r\n  ORDER_DELIVER_RESET,\r\n  \r\n} from \"../constants/orderConstants\";\r\n\r\n\r\nexport const orderCreateReducer = (state={}, action) => {\r\n    switch(action.type){\r\n        case ORDER_CREATE_REQUEST:\r\n            return {\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_CREATE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload\r\n            }\r\n        case ORDER_CREATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case ORDER_CREATE_RESET:\r\n            return { }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderDetailsReducer = (state={loading:true, orderItems:[], shippingAddress:{}}, action) => {\r\n    switch(action.type){\r\n        case ORDER_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                \r\n                order: action.payload\r\n            }\r\n        case ORDER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n      \r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderPayReducer = (state={}, action) => {\r\n    switch(action.type){\r\n        case ORDER_PAY_REQUEST:\r\n            return {\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_PAY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true                \r\n            }\r\n        case ORDER_PAY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            \r\n        case ORDER_PAY_RESET:\r\n            return {   }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderListMyReducer = (state={orders:[]}, action) => {\r\n    switch(action.type){\r\n        case ORDER_LIST_MY_REQUEST:\r\n            return {\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_LIST_MY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload                \r\n            }\r\n        case ORDER_LIST_MY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            \r\n        case ORDER_LIST_MY_RESET:\r\n            return { orders:[] }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderListReducer = (state={orders:[]}, action) => {\r\n    switch(action.type){\r\n        case ORDER_LIST_REQUEST:\r\n            return {\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload                \r\n            }\r\n        case ORDER_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            \r\n      \r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const orderDeliverReducer = (state={}, action) => {\r\n    switch(action.type){\r\n        case ORDER_DELIVER_REQUEST:\r\n            return {\r\n                loading: true\r\n                \r\n            }\r\n        case ORDER_DELIVER_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true                \r\n            }\r\n        case ORDER_DELIVER_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            \r\n        case ORDER_DELIVER_RESET:\r\n            return {   }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\reducers\\cartReducers.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Footer.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductScreen.js",["194"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  Button,\r\n  Card,\r\n  Form,\r\n} from \"react-bootstrap\";\r\n\r\nimport Rating from \"../components/Rating\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport { listProductDetails, createProductReview } from \"../actions/productActions\";\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history }) {\r\n  const [qty, setQty] = useState(1);\r\n  const [rating, setRating] = useState(0);\r\n  const [comment, setComment] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { loading, error, product } = productDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const productReviewCreate = useSelector((state) => state.productReviewCreate);\r\n  const { loading: loadingProductReview, error: errorProductReview, success:successProductReview } = productReviewCreate;\r\n\r\n  useEffect(() => {\r\n\r\n    if(successProductReview) {\r\n      setRating(0)\r\n      setComment('')\r\n      dispatch({type: PRODUCT_CREATE_REVIEW_RESET})\r\n    }\r\n\r\n    dispatch(listProductDetails(match.params.id));\r\n  }, [dispatch, match], successProductReview);\r\n\r\n  const addToCartHandler = () =>(\r\n    history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n  )\r\n\r\n  const submitHandler =(e) => {\r\n    e.preventDefault()\r\n    dispatch(createProductReview(\r\n      match.params.id, {\r\n        rating,\r\n        comment\r\n      }\r\n    ))\r\n  }\r\n  return (\r\n    <div>\r\n      <Link to=\"/\" className=\"btn btn-dark my-3\">\r\n        Назад\r\n      </Link>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <div>\r\n        <Row>\r\n          <Col md={6}>\r\n            <Image src={product.image} alt={product.name} fluid />\r\n          </Col>\r\n\r\n          <Col md={3}>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h3>{product.name}</h3>\r\n              </ListGroup.Item>\r\n              \r\n              <ListGroup.Item>\r\n                <Rating\r\n                  value={product.rating}\r\n                  text={`${product.numReviews} отзывы`}\r\n                  color={\"#f8e825\"}\r\n                />\r\n              </ListGroup.Item>\r\n              \r\n              <ListGroup.Item>Цена: ${product.price}</ListGroup.Item>\r\n              <ListGroup.Item>\r\n                Описание: {product.description}\r\n              </ListGroup.Item>\r\n            \r\n            </ListGroup>\r\n          </Col>\r\n\r\n          <Col md={3}>\r\n            <Card>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Цена:</Col>\r\n                    <Col>\r\n                      <strong>${product.price}</strong>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Наличие:</Col>\r\n                    <Col>\r\n                      {product.countInStock > 0 ? \"В наличии\" : \"Нет в наличии\"}\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                {product.countInStock > 0 && (\r\n                  <ListGroup.Item>\r\n                    \r\n                    <Row>\r\n                      <Col>Кол</Col>\r\n                      <Col xs=\"auto\" className=\"my-1\">\r\n                        \r\n                        <Form.Select\r\n                          as=\"select\"\r\n                          value={qty}\r\n                          onChange={(e) => setQty(e.target.value)}\r\n                        >\r\n                          {[...Array(product.countInStock).keys()].map((x) => (\r\n                            <option key={x + 1} value={x + 1}>\r\n                              {x + 1}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                )}\r\n\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                  <Button\r\n                    onClick={addToCartHandler}\r\n                    className='btn-block'\r\n                    disabled={product.countInStock <= 0}\r\n                    type='button'>\r\n                    Добавить в корзину\r\n                  </Button>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n          \r\n        </Row>\r\n        <Row>\r\n          <Col md={6}>\r\n            <p></p>\r\n            <h4>Оценка</h4>\r\n\r\n            {loadingProductReview && <Loader/>}\r\n            {successProductReview && <Message variant='success'>Отзыв отправлен</Message>}\r\n            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n\r\n            {product.reviews.length === 0 && <Message variant='info'>Без оценки</Message>}\r\n            <ListGroup variant='flush'>\r\n              {product.reviews.map((review) => (\r\n                <ListGroup.Item key={review._id}>\r\n                  <strong>{review.name}</strong>\r\n                  <Rating value={review.rating} color='#f8e825' />\r\n                  <p>{review.createdAt.substring(0,10)}</p>\r\n                  <p>{review.comment}</p>\r\n                  \r\n              </ListGroup.Item>\r\n              ))}\r\n              <p></p>\r\n              <ListGroup.Item>\r\n                <h4>Напиши отзыв</h4>\r\n                {userInfo ? (\r\n                  <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='rating'>\r\n                      <Form.Label>Оценка</Form.Label>\r\n                      <Form.Control\r\n                        as='select'\r\n                        value={rating}\r\n                        onChange={(e) => setRating(e.target.value)}\r\n                        >\r\n                          <option value=''>Выбрать...</option>\r\n                          <option value='1'>1 - Очень плохо</option>\r\n                          <option value='2'>2 - Плохо</option>\r\n                          <option value='3'>3 - Удовлитворительно</option>\r\n                          <option value='4'>4 - Хорошо</option>\r\n                          <option value='5'>5 - Отлично</option>\r\n                          </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='comment'>\r\n                      <Form.Label>Отзыв</Form.Label>\r\n                      <Form.Control\r\n                          as='textarea'\r\n                          row='5'\r\n                          value={comment}\r\n                          onChange={(e) => setComment(e.target.value)}\r\n                          ></Form.Control>\r\n\r\n                    </Form.Group>\r\n                    <Button\r\n                      disabled={loadingProductReview}\r\n                      type='submit'\r\n                      variant='primary'>\r\n                      Submit\r\n                    </Button>\r\n\r\n                  </Form>\r\n                ): (\r\n                  <Message variant='info'>Пожалуйста<Link to ='/login'> зарегистрируйтесь</Link>, чтобы оставить отзыв</Message>\r\n                )}\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n\r\n          </Col>\r\n        </Row>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\LoginScreen.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Header.js",["195"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header() {\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n  \r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  return (\r\n    <header className='sticky-top'>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n        <Container>\r\n          <LinkContainer to=\"/\">\r\n            <Navbar.Brand>ProShop</Navbar.Brand>\r\n          </LinkContainer>\r\n\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            \r\n            <Nav className=\"mr-auto\">\r\n              <LinkContainer to=\"/cart\">\r\n                <Nav.Link>\r\n                  <i className=\"fas fa-shopping-cart\"></i> Корзина\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                  <NavDropdown title={userInfo.name} id='username'>\r\n                      <LinkContainer to='/profile'>\r\n                        <NavDropdown.Item>Личные данные</NavDropdown.Item>\r\n                      </LinkContainer>\r\n                      <NavDropdown.Item onClick={logoutHandler}>Выйти</NavDropdown.Item>\r\n                  </NavDropdown>\r\n              ): (\r\n                <LinkContainer to=\"/login\">\r\n                <Nav.Link>\r\n                  <i className=\"fas fa-user\"></i> Логин\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n              )}\r\n\r\n                  {userInfo && userInfo.isAdmin && (\r\n                      <NavDropdown title='Admin' id='adminmenu'>\r\n                      <LinkContainer to='/admin/userlist'>\r\n                        <NavDropdown.Item>Пользователи</NavDropdown.Item>\r\n                      </LinkContainer>\r\n                      <LinkContainer to='/admin/productList'>\r\n                        <NavDropdown.Item>Товары</NavDropdown.Item>\r\n                      </LinkContainer>\r\n                      <LinkContainer to='/admin/orderlist'>\r\n                        <NavDropdown.Item>Заказы</NavDropdown.Item>\r\n                      </LinkContainer>\r\n                  </NavDropdown>\r\n                  )}\r\n                    \r\n\r\n              \r\n            </Nav>\r\n          </Navbar.Collapse>\r\n          <SearchBox />\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\HomeScreen.js",["196"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const { error, loading, products, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n        dispatch(listProducts(keyword))\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n        <div>\r\n            {!keyword && <ProductCarousel />}\r\n\r\n            <h1>Наши товары</h1>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                            {products.map(product => (\r\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Product product={product} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\RegisterScreen.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ShippingScreen.js",["197"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport  CheckoutSteps from '../components/CheckoutSteps'\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n  const cart = useSelector(state => state.cart)\r\n  const { shippingAddress } = cart\r\n  \r\n  const dispatch = useDispatch()\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address);\r\n  const [city, setCity] = useState(shippingAddress.city);\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\r\n  const [country, setCountry] = useState(shippingAddress.country);\r\n\r\n  const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n      history.push('/payment')\r\n  }\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 />\r\n      <h1>Доставка</h1>\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId=\"address\">\r\n          <Form.Label>Адрес</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"text\"\r\n            placeholder=\"Enter address\"\r\n            value={address ? address : ''}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"city\">\r\n          <Form.Label>Город</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"text\"\r\n            placeholder=\"Enter city\"\r\n            value={city ? city : ''}\r\n            onChange={(e) => setCity(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"postalCode\">\r\n          <Form.Label>Почтовый индекс</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"text\"\r\n            placeholder=\"Enter postalCode\"\r\n            value={postalCode ? postalCode : ''}\r\n            onChange={(e) => setPostalCode(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"country\">\r\n          <Form.Label>Страна</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"text\"\r\n            placeholder=\"Enter country\"\r\n            value={country ? country : ''}\r\n            onChange={(e) => setCountry(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='primary'>\r\n            Продолжить\r\n        </Button>\r\n\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default ShippingScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\CartScreen.js",["198"],"import React, { useEffect, useEfffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Form,\r\n  Button,\r\n  Card,\r\n} from \"react-bootstrap\";\r\nimport Message from \"../components/Message\";\r\nimport { addToCart, removeFromCart } from \"../actions/cartActions\";\r\n\r\nfunction CartScreen({ match, location, history }) {\r\n  const productId = match.params.id;\r\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems } = cart;\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty));\r\n    }\r\n  }, [dispatch, productId, qty]);\r\n\r\n\r\n  const removeFromCartHandler =(id) => {\r\n    dispatch(removeFromCart(id))\r\n  }\r\n\r\n  const checkoutHandler =() => {\r\n      history.push('/login?redirect=shipping')\r\n  }\r\n\r\n  return (\r\n    \r\n    <Row>\r\n      <Col md={8}>\r\n        <h1>Корзина</h1>\r\n        {cartItems.length === 0 ? (\r\n          <Message>\r\n            Ваша корзина пуста <Link to=\"/\" style={{ textDecoration: 'none' , color:'red'}} >Назад</Link>\r\n          </Message>\r\n        ) : (\r\n          <ListGroup variant=\"flush\">\r\n            {cartItems.map((item) => (\r\n              <ListGroup.Item key={item.product}>\r\n                <Row>\r\n                  <Col md={2}>\r\n                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <Link to={`/product/${item.product}`} style ={{ textDecoration: 'none' }}>{item.name}</Link>\r\n                  </Col>\r\n\r\n                  <Col md={2}>${item.price}</Col>\r\n                  <Col md={3}>\r\n                    <Form.Select\r\n                      as=\"select\"\r\n                      value={item.qty}\r\n                      onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                    >\r\n                      {[...Array(item.countInStock).keys()].map((x) => (\r\n                        <option key={x + 1} value={x + 1}>\r\n                          {x + 1}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                  </Col>\r\n\r\n                  <Col md={1}>\r\n                      <Button\r\n                            type='button'\r\n                            variant='light'\r\n                            onClick={() => removeFromCartHandler(item.product)}\r\n                        >\r\n                            <i className=\"fas fa-trash\"></i>\r\n                        </Button>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            ))}\r\n          </ListGroup>\r\n        )}\r\n      </Col>\r\n      <Col md={4}>\r\n          <Card>\r\n              <ListGroup className variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                      <h2>Количество ({cartItems.reduce((acc, item) => acc + item.qty, 0)})</h2>\r\n                      ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\r\n                  </ListGroup.Item>\r\n              </ListGroup>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Button\r\n                    type=\"button\"\r\n                    className=\"btn-block\"\r\n                    disabled={cartItems.length === 0}\r\n                    onClick={checkoutHandler}\r\n                    >\r\n                        Перейти к заказу\r\n\r\n                  </Button>\r\n                  </Row>\r\n              </ListGroup.Item>\r\n          </Card>\r\n      </Col>\r\n    </Row>\r\n    \r\n  );\r\n}\r\n\r\nexport default CartScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\PaymentScreen.js",["199"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport CheckoutSteps from \"../components/CheckoutSteps\";\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\nfunction PaymentScreen({ history }) {\r\n  const cart = useSelector((state) => state.cart);\r\n  const { shippingAddress } = cart;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState(\"PayPal\");\r\n\r\n  if (!shippingAddress.address) {\r\n    history.push(\"/shipping\");\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(savePaymentMethod(paymentMethod))\r\n    history.push(\"/placeorder\");\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 step3 />\r\n\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group>\r\n          <Form.Label as=\"legend\">Выбрать метод</Form.Label>\r\n          <Col>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label=\"PayPal or Credit Card\"\r\n              id=\"paypal\"\r\n              name=\"paymentMethod\"\r\n              checked\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n            ></Form.Check>\r\n          </Col>\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"primary\">\r\n          Continue\r\n        </Button>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default PaymentScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\OrderScreen.js",["200"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport { getOrderDetails, payOrder, deliverOrder } from \"../actions/orderActions\";\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\n\r\n\r\nfunction OrderScreen({ match, history }) {\r\n  const orderId = match.params.id;\r\n  const dispatch = useDispatch();\r\n\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, error, loading } = orderDetails;\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  if (!loading && !error) {\r\n    order.itemsPrice = order.orderItems\r\n      .reduce((acc, item) => acc + item.price * item.qty, 0)\r\n      .toFixed(2);\r\n  }\r\n  //AfJf_coBtNq1RSRPERQYIBGKWRAskgQu2rmo6Mvsm_uftb17sI-TfcMPbgdqc0RlrMP2PlfQd8eygQ48\r\n\r\n  const addPayPalScript = () => {\r\n      const script = document.createElement('script')\r\n      script.type='text/javascript'\r\n      script.src = \"https://www.paypal.com/sdk/js?client-id=AfJf_coBtNq1RSRPERQYIBGKWRAskgQu2rmo6Mvsm_uftb17sI-TfcMPbgdqc0RlrMP2PlfQd8eygQ48\"\r\n      script.async = true\r\n      script.onload = () =>{\r\n          setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n      if(!userInfo) {\r\n        history.push('/login')\r\n      }\r\n      if (!order || successPay || order._id !== Number(orderId) || successDeliver ) {\r\n        dispatch({ type: ORDER_PAY_RESET })\r\n        dispatch({ type: ORDER_DELIVER_RESET })\r\n        dispatch(getOrderDetails(orderId));\r\n      } else if(!order.isPaid) {\r\n          if (!window.paypal) {\r\n              addPayPalScript()\r\n          }\r\n          else{\r\n              setSdkReady(true)\r\n          }\r\n      }\r\n    \r\n  }, [dispatch, order, orderId, successPay, successDeliver]);\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n      dispatch(payOrder(orderId, paymentResult))\r\n\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n\r\n}\r\n\r\n  return loading ? (\r\n      <Loader />\r\n  ) : error ? (\r\n      <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <div>\r\n        <h1>Заказ: {order._id}</h1>\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Доставка</h2>\r\n              <p><strong>Имя: </strong>{order.user.name}</p>\r\n              <p><strong>Почта: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n              <p>\r\n                <strong>Доставка: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}\r\n                {\"  \"}\r\n                {order.shippingAddress.postalCode},{\"  \"}\r\n                {order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                  <Message variant='success'>Отправлен {order.deliveredAt}</Message>\r\n              ): (\r\n                <Message variant='warning'>Не отправлен</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Способ оплаты</h2>\r\n              <p>\r\n                <strong>Метод: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n\r\n              {order.isPaid ? (\r\n                  <Message variant='success'>Оплачено {order.paidAt}</Message>\r\n              ): (\r\n                <Message variant='warning'>Не оплачено</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Товары заказа</h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message variant=\"info\">Нет заказа</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = $\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Данные заказа</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Item:</Col>\r\n                  <Col>${order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping:</Col>\r\n                  <Col>${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax:</Col>\r\n                  <Col>${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total:</Col>\r\n                  <Col>${order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              {!order.isPaid && (\r\n                  <ListGroup.Item>\r\n                      {loadingPay && <Loader />}\r\n                      {!sdkReady ? (\r\n                          <Loader />\r\n                      ) : (\r\n                            <PayPalButton\r\n                                amount = {order.totalPrice}\r\n                                onSuccess = {successPaymentHandler}\r\n                            />\r\n                      )}\r\n                  </ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n            {loadingDeliver && <Loader/>}\r\n            {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                <ListGroup.Item>\r\n                  <Button\r\n                    type='button'\r\n                    className='btn btn-block'\r\n                    onClick={deliverHandler}>\r\n                     Отметить доставку\r\n                  </Button>\r\n                </ListGroup.Item>\r\n            )}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrderScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\UserListScreen.js",["201"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {  // redirect user\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const {loading, error, users} = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n        dispatch(listUsers())\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n    const deleteHandler = (id) =>{\r\n        if(window.confirm('Вы уверены, что хотоите удалить этого пользователя?'))\r\n        dispatch(deleteUser(id))\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Пользователи</h1>\r\n            {loading\r\n            ? <Loader/>\r\n            : error\r\n            ? <Message variant='danger'>{error}</Message>\r\n            : (\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>ИМЯ</th>\r\n                            <th>ПОЧТА</th>\r\n                            <th>АДМИН</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {users.map(user => (\r\n                            <tr key={user._id}>\r\n                                <td>{user._id}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.isAdmin ? \r\n                                \r\n                                    <i className=\"fas fa-check\" style={{ color:'green' }}></i>\r\n                                    : (\r\n\r\n                                     <i className=\"fas fa-circle\" style={{ color:'pink' }}></i>)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                        <Button variant='light' className=\"btn-sm\">\r\n                                            <i className=\"fas fa-edit\"></i>\r\n                                        </Button>\r\n                                        \r\n                                    </LinkContainer>\r\n                                    <Button variant='danger' className=\"btn-sm\" onClick={() => deleteHandler(user._id)}>\r\n                                            <i className=\"fas fa-trash\"></i>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </Table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProfileScreen.js",["202","203"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button, Row, Col, Table } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\n\r\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\r\nimport {\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_RESET,\r\n} from \"../constants/userConstants\";\r\n\r\nimport { listMyOrders } from \"../actions/orderActions\";\r\n\r\nfunction ProfileScreen({ history }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const { loading:loadingOrders, error:errorOrders, orders } = orderListMy;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    } else {\r\n      if (!user || !user.name || success || userInfo._id !== user._id) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET });\r\n        dispatch(getUserDetails(\"profile\"));\r\n        dispatch(listMyOrders());\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user, success]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n    } else {\r\n      dispatch(\r\n        updateUserProfile({\r\n          id: user._id,\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>Данные</h2>\r\n        {message && <Message variant=\"danger\">{message}</Message>}\r\n        {error && <Message variant=\"danger\">{error}</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId=\"name\">\r\n            <Form.Label>Имя</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"name\"\r\n              placeholder=\"Enter name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"email\">\r\n            <Form.Label>Почта</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"email\"\r\n              placeholder=\"Enter Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label>Пароль</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Enter Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"passwordConfirm\">\r\n            <Form.Label>Потвердить пароль</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Confirm Password\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Button className=\"mt-3\" type=\"submit\" variant=\"primary\">\r\n            Обновить\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n\r\n      <Col md={9}>\r\n        <h2>Мои заказы</h2>\r\n        {loadingOrders ? (\r\n          <Loader/>\r\n        ) : errorOrders ? (\r\n            <Message variant='danger'>{errorOrders}</Message>\r\n        ) : (\r\n            <Table striped responsive  className=\"table-sm\">\r\n              <thead>\r\n                <tr>\r\n                  <th> ID </th>\r\n                  <th> Дата </th>\r\n                  <th> Сумма </th>\r\n                  <th> Оплачено </th>\r\n                  <th> Доставлено </th>\r\n                  <th>  </th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {orders.map(order => (\r\n                  <tr>\r\n                    <td>{order._id}</td>\r\n                    <td>{order.createdAt.substring(0,10)}</td>\r\n                    <td>${order.totalPrice}</td>\r\n                    <td>{order.isPaid ? order.paidAt.substring(0,10) : (\r\n                        <i className=\"fas fa-times\" style={{ color: 'red' }}></i>\r\n                    )}</td>\r\n                    <td>{order.deliveredAt}</td>\r\n                    <td>\r\n                      <LinkContainer to={`/order/${order._id}`}>\r\n                        <Button className='btn-sm'>Детали</Button>\r\n                      </LinkContainer>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\PlaceOrderScreen.js",["204","205"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Message from \"../components/CheckoutSteps\";\r\nimport CheckoutSteps from \"../components/CheckoutSteps\";\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n  const orderCreate = useSelector(state => state.orderCreate)\r\n  const { order, error, success } = orderCreate\r\n\r\n  const dispatch = useDispatch()\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  cart.itemsPrice = cart.cartItems.reduce((acc,item) => acc + item.price * item.qty, 0).toFixed(2)\r\n  cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n  cart.taxPrice = ((0.1) * cart.itemsPrice).toFixed(2)\r\n  cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) +Number(cart.taxPrice)).toFixed(2)\r\n\r\n  if(!cart.paymentMethod) {\r\n    history.push('/payment')\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(success) {\r\n      history.push(`/order/${order._id}`)\r\n      dispatch({ type:ORDER_CREATE_RESET })\r\n    }\r\n  }, [success, history])\r\n  // button 'Palce Order' \r\n  const placeOrder = () => {\r\n    dispatch(createOrder({\r\n      orderItems: cart.cartItems,\r\n      shippingAddress: cart.shippingAddress,\r\n      paymentMethod: cart.paymentMethod,\r\n      itemsPrice: cart.itemsPrice,\r\n      shippingPrice: cart.shippingPrice,\r\n      taxPrice: cart.taxPrice,\r\n      totalPrice: cart.totalPrice,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Доставка</h2>\r\n              <p>\r\n                <strong>Доставка: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}\r\n                {\"  \"}\r\n                {cart.shippingAddress.postalCode},{\"  \"}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Метод оплаты</h2>\r\n              <p>\r\n                <strong>Метод: </strong>\r\n                {cart.paymentMethod}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Заказы</h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message variant=\"info\">Корзина пуста</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = $\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        \r\n        \r\n        \r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n                  <ListGroup.Item>\r\n                      <h2>Заказы</h2>\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Товар:</Col>\r\n                        <Col>${cart.itemsPrice}</Col>\r\n                      </Row>\r\n                  </ListGroup.Item>\r\n                  \r\n                  <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Доставка:</Col>\r\n                        <Col>${cart.shippingPrice}</Col>\r\n                      </Row>\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Налог:</Col>\r\n                        <Col>${cart.taxPrice}</Col>\r\n                      </Row>\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Сумма:</Col>\r\n                        <Col>${cart.totalPrice}</Col>\r\n                      </Row>\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                    {error && <Message variant='danger'>{error}</Message>}\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                      <Row>\r\n                        <Button type='button' \r\n                                className='btn-block' \r\n                                disable={cart.cartItems === 0}\r\n                                onClick = {placeOrder}>\r\n                          Сделать заказ\r\n                        </Button>\r\n                      </Row>\r\n                  </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlaceOrderScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\UserEditScreen.js",["206"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { getUserDetails, updateUser } from \"../actions/userActions\";\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id;\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate);\r\n  const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate;\r\n\r\n\r\n  useEffect(() => {\r\n\r\n      if(successUpdate) {\r\n        dispatch({type: USER_UPDATE_RESET})\r\n        history.push('/admin/userList')\r\n        \r\n      }else{\r\n            if(!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n                } else{\r\n                        setName(user.name);\r\n                        setEmail(user.email);\r\n                        setIsAdmin(user.isAdmin);\r\n        }\r\n    }}, [user, userId, successUpdate, history]);  \r\n\r\n     \r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateUser({_id: user._id, name, email, isAdmin}))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <Link to='/admin/userlist'>\r\n            Назад\r\n        </Link>\r\n      <FormContainer>\r\n        <h1>Редактировать пользователя</h1>\r\n        {loadingUpdate && <Loader/>}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message> }\r\n\r\n        {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> \r\n        : (\r\n            <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Имя</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Почта</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"isadmin\">\r\n              \r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Is Admin\"\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n  \r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Обновить\r\n            </Button>\r\n          </Form>\r\n        )}\r\n        \r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserEditScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductListScreen.js",["207"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button, Row, Col} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport Paginate from \"../components/Paginate\";\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {  // redirect user\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const {loading, error, products, page, pages} = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const {loading: loadingDelete, error: errorDelete, success: successDelete} = productDelete\r\n\r\n    const productCreate= useSelector(state => state.productCreate)\r\n    const {loading: loadingCreate, error: errorCreate, success: successCreate, product:createdProduct} = productCreate\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if( !userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if(successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        }else{\r\n            dispatch(listProducts(keyword))\r\n        }\r\n      \r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n    const deleteHandler = (id) =>{\r\n        if(window.confirm('Вы уверены, что хотоите удалить этот товар?')){\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = (product) => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className=\"align-items-center\">\r\n                <Col>\r\n                    <h1>Товары</h1>\r\n                </Col>\r\n                <Col className=\"text-right\">\r\n                        \r\n                        <Button className='my-3' onClick={createProductHandler}>\r\n                            <i className=\"fas fa-plus\"></i> Создать товар \r\n                        </Button>\r\n                       \r\n                </Col>\r\n\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader/>}\r\n            {errorDelete && <Message variant = 'danger'>{errorDelete}</Message>}\r\n\r\n            {loadingCreate && <Loader/>}\r\n            {errorCreate && <Message variant = 'danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n            ? <Loader/>\r\n            : error\r\n            ? <Message variant='danger'>{error}</Message>\r\n            : (\r\n                <div>\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>НАЗВАНИЕ</th>\r\n                            <th>ЦЕНА</th>\r\n                            <th>КАТЕГОРИЯ</th>\r\n                            <th>БРЕНД</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {products.map(product => (\r\n                            <tr key={product._id}>\r\n                                <td>{product._id}</td>\r\n                                <td>{product.name}</td>\r\n                                <td>${product.price}</td>\r\n                                <td>{product.category}</td>\r\n                                <td>{product.brand}</td>\r\n                              \r\n\r\n                                <td>\r\n                                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                        <Button variant='light' className=\"btn-sm\">\r\n                                            <i className=\"fas fa-edit\"></i>\r\n                                        </Button>\r\n                                        \r\n                                    </LinkContainer>\r\n                                    <Button variant='danger' className=\"btn-sm\" onClick={() => deleteHandler(product._id)}>\r\n                                            <i className=\"fas fa-trash\"></i>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </Table>\r\n                <Paginate pages={pages} page={page} isAdmin={true}/>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\ProductEditScreen.js",["208"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { listProductDetails, updateProduct } from \"../actions/productActions\";\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  \r\n    const productId = match.params.id;\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [image, setImage] = useState(\"\");\r\n  const [brand, setBrand] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [countInStock, setCountInStock] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { error, loading, product } = productDetails;\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate);\r\n  const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate;\r\n\r\n\r\n  useEffect(() => {\r\n\r\n            if(successUpdate) {\r\n                dispatch({type: PRODUCT_UPDATE_RESET})\r\n                history.push('/admin/productlist')\r\n            }\r\n            else {\r\n                  if(!product.name || product._id !== Number(productId)) {\r\n                    dispatch(listProductDetails(productId))\r\n                    } else{\r\n                            setName(product.name);\r\n                            setPrice(product.price);\r\n                            setImage(product.image);\r\n                            setBrand(product.brand);\r\n                            setCategory(product.category);\r\n                            setCountInStock(product.countInStock);\r\n                            setDescription(product.description);\r\n                        }\r\n                } \r\n\r\n           \r\n    }, [dispatch, product, productId, history, successUpdate]);  \r\n\r\n     \r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        countInStock,\r\n        description        \r\n    }))\r\n    \r\n  };\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n\r\n    formData.append('image', file)\r\n    formData.append('product_id', productId)\r\n\r\n    setUploading(true)\r\n\r\n    try{\r\n        const config = {\r\n          headers: {\r\n              'Content-Type':'multipart/form-data'\r\n          }\r\n        }\r\n\r\n        const {data} = await axios.post('/api/products/upload/', formData, config)\r\n        \r\n        setImage(data)\r\n        setUploading(false)\r\n\r\n    }catch(error) {\r\n      setUploading(false)\r\n    }\r\n  } \r\n\r\n  return (\r\n    <div>\r\n        <Link to='/admin/productlist'>\r\n           Назад\r\n        </Link>\r\n      <FormContainer>\r\n        <h1>Редактировать товар</h1>\r\n        {loadingUpdate && <Loader/>}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n        {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> \r\n        : (\r\n            <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Название</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Введите название\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"price\">\r\n              <Form.Label>Цена</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Введите цену\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"image\">\r\n              <Form.Label>Картинка</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Введите картинку\"\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n              \r\n              <Form.Control\r\n                 \r\n                 type=\"file\"\r\n                 \r\n                 onChange={uploadFileHandler}\r\n                 custom\r\n                   >\r\n              </Form.Control>\r\n\r\n              {uploading && <Loader />}\r\n            </Form.Group>\r\n            \r\n            <Form.Group controlId=\"brand\">\r\n              <Form.Label>Бренд</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Введите бренд\"\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"countInStock\">\r\n              <Form.Label>В наличии</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Введите наличие\"\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"category\">\r\n              <Form.Label>Категория</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Введите категорию\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Label>Описание</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Введите описание\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n   \r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n        \r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductEditScreen;\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\screens\\OrderListScreen.js",["209"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {  // redirect user\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const {loading, error, orders} = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n        \r\n    }, [dispatch, history, userInfo])\r\n\r\n   \r\n    return (\r\n        <div>\r\n            <h1>Заказы</h1>\r\n            {loading\r\n            ? <Loader/>\r\n            : error\r\n            ? <Message variant='danger'>{error}</Message>\r\n            : (\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Клиент</th>\r\n                            <th>Дата</th>\r\n                            <th>Сумма оплаты</th>\r\n                            <th>Оплачено</th>\r\n                            <th>Отправлено</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {orders.map(order => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id}</td>\r\n                                <td>{order.user && order.user.name}</td>\r\n                                <td>{order.createdAt.substring(0,10)}</td>\r\n                                <td>${order.totalPrice}</td>\r\n                                <td>{order.isPaid ? (\r\n                                      order.paidAt.substring(0,10)                          \r\n                                    ) : (\r\n\r\n                                     <i className=\"fas fa-circle\" style={{ color:'pink' }}></i>)}\r\n                                </td>\r\n\r\n                                <td>{order.isDelivered ? (\r\n                                      order.deliveredAt.substring(0,10)                          \r\n                                    ) : (\r\n\r\n                                     <i className=\"fas fa-circle\" style={{ color:'pink' }}></i>)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button variant='light' className=\"btn-sm\">\r\n                                            Детали\r\n                                        </Button>\r\n                                        \r\n                                    </LinkContainer>\r\n                                    \r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </Table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Loader.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Message.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Rating.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\FormContainer.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\SearchBox.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\ProductCarousel.js",["210","211","212","213"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Carousel, Image } from 'react-bootstrap'\nimport Loader from './Loader'\nimport Message from './Message'\nimport { listTopProducts } from '../actions/productActions'\n\nfunction ProductCarousel() {\n    const dispatch = useDispatch()\n\n    const productTopRated = useSelector(state => state.productTopRated)\n    const { error, loading, products } = productTopRated\n\n    useEffect(() => {\n        dispatch(listTopProducts())\n    }, [dispatch])\n\n    return (\n                <Carousel pause='hover' className='bg-dark'>\n                    {products.map(product => (\n                        <Carousel.Item key={product._id}>\n                            <Link to={`/product/${product._id}`}>\n                                <Image src={product.image} alt={product.name} fluid />\n                                <Carousel.Caption className='carousel.caption'>\n                                    <h4>{product.name} (${product.price})</h4>\n                                </Carousel.Caption>\n                            </Link>\n                        </Carousel.Item>\n                    ) )}\n                </Carousel>\n            )\n\n    \n}\n\nexport default ProductCarousel\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Paginate.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\CheckoutSteps.js",["214"],"import React from 'react'\r\nimport { Nav } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction CheckoutSteps({ step1, step2, step3, step4 }) {\r\n    return (\r\n        <Nav className='justify-content-center md-4'>\r\n            <Nav.Item>\r\n                {step1 ? (\r\n                    <LinkContainer to='/login'>\r\n                        <Nav.Link>Логин</Nav.Link>\r\n                    </LinkContainer>\r\n                )      : (\r\n                    <Nav.Link disabled>Логин</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step2 ? (\r\n                    <LinkContainer to='/shipping'>\r\n                        <Nav.Link>Доставка</Nav.Link>\r\n                    </LinkContainer>\r\n                )      : (\r\n                    <Nav.Link disabled>Доставка</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step3 ? (\r\n                    <LinkContainer to='/payment'>\r\n                        <Nav.Link>Оплата</Nav.Link>\r\n                    </LinkContainer>\r\n                )      : (\r\n                    <Nav.Link disabled>Оплата</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step4 ? (\r\n                    <LinkContainer to='/placeorder'>\r\n                        <Nav.Link>Оформить заказ</Nav.Link>\r\n                    </LinkContainer>\r\n                )      : (\r\n                    <Nav.Link disabled>Оформить заказ</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            \r\n        </Nav>\r\n       \r\n    )\r\n}\r\n\r\nexport default CheckoutSteps\r\n","E:\\DjangoEcommerce\\backend\\frontend\\src\\components\\Product.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\userConstants.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\orderConstants.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\productConstants.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\constants\\cartConstants.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\cartActions.js",[],"E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\productActions.js",["215"],"import axios from 'axios'\r\n\r\nimport { \r\n    PRODUCT_LIST_REQUEST, \r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST, \r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST, \r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST, \r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST, \r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST, \r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n    \r\n    PRODUCT_TOP_REQUEST, \r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n    \r\n\r\n } from '../constants/productConstants'\r\n\r\n export const listProducts = (keyword='') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n        const {data} = await axios.get(`/api/products${keyword}`)\r\n\r\n        dispatch( {\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n }\r\n\r\n export const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n        const {data} = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch( {\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n }\r\n\r\n\r\n export const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n        const {data} = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch( {\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n }\r\n\r\n export const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.delete(\r\n                `/api/products/delete/${id}`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n            \r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(                   // to Django\r\n                `/api/products/create/`,\r\n                {},\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n \r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(                   // to Django\r\n                `/api/products/update/${product._id}/`,\r\n                product,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, \r\n                  payload: data\r\n                })\r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(                   // to Django\r\n                `/api/products/${productId}/reviews/`,\r\n                review,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        \r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\userActions.js",["216"],"import axios from 'axios'\r\n\r\nimport { \r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    \r\n\r\n    } from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'   \r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json'\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n                '/api/users/login/',\r\n                { 'username':email, 'password':password },\r\n                config)\r\n        \r\n        dispatch({\r\n            type:USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n        \r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({type: USER_DETAILS_RESET})\r\n    dispatch({type: ORDER_LIST_MY_RESET})\r\n    dispatch({type: USER_LIST_RESET})\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json'\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n                '/api/users/register/',\r\n                { 'name': name, 'email': email, 'password':password },\r\n                config)\r\n        \r\n        dispatch({\r\n            type:USER_REGISTER_SUCCESS,\r\n            payload:data\r\n        })\r\n        dispatch({\r\n            type:USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n\r\n    } catch (error) { \r\n        dispatch({ \r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n                `/api/users/${id}/`,\r\n                \r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n      \r\n\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n                `/api/users/profile/update/`,\r\n                user,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n      \r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n                `/api/users/`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.delete(                   // to Django\r\n                `/api/users/delete/${id}/`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(                   // to Django\r\n                `/api/users/update/${user._id}/`,\r\n                user,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n            \r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}","E:\\DjangoEcommerce\\backend\\frontend\\src\\actions\\orderActions.js",["217","218","219"],"import axios from 'axios'\r\nimport {\r\n ORDER_CREATE_REQUEST, \r\n ORDER_CREATE_SUCCESS, \r\n ORDER_CREATE_FAIL, \r\n\r\n ORDER_DETAILS_REQUEST, \r\n ORDER_DETAILS_SUCCESS, \r\n ORDER_DETAILS_FAIL,\r\n\r\n ORDER_PAY_REQUEST, \r\n ORDER_PAY_SUCCESS, \r\n ORDER_PAY_FAIL,\r\n ORDER_PAY_RESET,\r\n\r\n ORDER_LIST_MY_REQUEST, \r\n ORDER_LIST_MY_SUCCESS, \r\n ORDER_LIST_MY_FAIL,\r\n ORDER_LIST_MY_RESET,\r\n\r\n ORDER_LIST_REQUEST, \r\n ORDER_LIST_SUCCESS, \r\n ORDER_LIST_FAIL,\r\n\r\n ORDER_DELIVER_REQUEST, \r\n ORDER_DELIVER_SUCCESS, \r\n ORDER_DELIVER_FAIL,\r\n ORDER_DELIVER_RESET,\r\n\r\n} from '../constants/orderConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n                `/api/orders/add/`,\r\n                order,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n     \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n                `/api/orders/${id}/`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n                `/api/orders/${id}/pay/`,\r\n                paymentResult,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload:data\r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n                `/api/orders/myorders/`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload:data\r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n                `/api/orders/`,\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const { \r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n                `/api/orders/${order._id}/deliver/`,\r\n                {},\r\n                config\r\n            )\r\n        \r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload:data\r\n        })\r\n   \r\n    } catch (error) {\r\n        dispatch({ \r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}",{"ruleId":"220","severity":1,"message":"221","line":54,"column":5,"nodeType":"222","messageId":"223","endLine":54,"endColumn":14},{"ruleId":"224","severity":1,"message":"225","line":2,"column":32,"nodeType":"226","messageId":"227","endLine":2,"endColumn":38},{"ruleId":"224","severity":1,"message":"228","line":24,"column":3,"nodeType":"226","messageId":"227","endLine":24,"endColumn":19},{"ruleId":"229","severity":1,"message":"230","line":44,"column":6,"nodeType":"231","endLine":44,"endColumn":23,"suggestions":"232"},{"ruleId":"224","severity":1,"message":"233","line":4,"column":34,"nodeType":"226","messageId":"227","endLine":4,"endColumn":37},{"ruleId":"224","severity":1,"message":"234","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"235","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"236","line":1,"column":28,"nodeType":"226","messageId":"227","endLine":1,"endColumn":38},{"ruleId":"224","severity":1,"message":"235","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"229","severity":1,"message":"237","line":67,"column":6,"nodeType":"231","endLine":67,"endColumn":60,"suggestions":"238"},{"ruleId":"224","severity":1,"message":"234","line":2,"column":17,"nodeType":"226","messageId":"227","endLine":2,"endColumn":25},{"ruleId":"224","severity":1,"message":"239","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"224","severity":1,"message":"240","line":11,"column":3,"nodeType":"226","messageId":"227","endLine":11,"endColumn":30},{"ruleId":"224","severity":1,"message":"234","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"229","severity":1,"message":"241","line":33,"column":6,"nodeType":"231","endLine":33,"endColumn":24,"suggestions":"242"},{"ruleId":"229","severity":1,"message":"243","line":43,"column":9,"nodeType":"231","endLine":43,"endColumn":47,"suggestions":"244"},{"ruleId":"224","severity":1,"message":"234","line":2,"column":17,"nodeType":"226","messageId":"227","endLine":2,"endColumn":25},{"ruleId":"224","severity":1,"message":"245","line":11,"column":10,"nodeType":"226","messageId":"227","endLine":11,"endColumn":27},{"ruleId":"224","severity":1,"message":"234","line":2,"column":17,"nodeType":"226","messageId":"227","endLine":2,"endColumn":25},{"ruleId":"224","severity":1,"message":"246","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":14},{"ruleId":"224","severity":1,"message":"247","line":6,"column":8,"nodeType":"226","messageId":"227","endLine":6,"endColumn":15},{"ruleId":"224","severity":1,"message":"248","line":13,"column":13,"nodeType":"226","messageId":"227","endLine":13,"endColumn":18},{"ruleId":"224","severity":1,"message":"249","line":13,"column":20,"nodeType":"226","messageId":"227","endLine":13,"endColumn":27},{"ruleId":"224","severity":1,"message":"239","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":14},{"ruleId":"224","severity":1,"message":"250","line":112,"column":16,"nodeType":"226","messageId":"227","endLine":112,"endColumn":20},{"ruleId":"224","severity":1,"message":"251","line":22,"column":5,"nodeType":"226","messageId":"227","endLine":22,"endColumn":30},{"ruleId":"224","severity":1,"message":"252","line":14,"column":2,"nodeType":"226","messageId":"227","endLine":14,"endColumn":17},{"ruleId":"224","severity":1,"message":"253","line":19,"column":2,"nodeType":"226","messageId":"227","endLine":19,"endColumn":21},{"ruleId":"224","severity":1,"message":"254","line":28,"column":2,"nodeType":"226","messageId":"227","endLine":28,"endColumn":21},"no-dupe-keys","Duplicate key 'orderList'.","ObjectExpression","unexpected","no-unused-vars","'Routes' is defined but never used.","Identifier","unusedVar","'ORDER_LIST_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'successProductReview'. Either include it or remove the dependency array.","ArrayExpression",["255"],"'Row' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useEfffect' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["256"],"'Link' is defined but never used.","'USER_UPDATE_PROFILE_REQUEST' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["258"],"'USER_UPDATE_RESET' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.",{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [dispatch, match, successProductReview]",{"range":"267","text":"268"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"269","text":"270"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"271","text":"272"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"273","text":"274"},[1422,1439],"[dispatch, match, successProductReview]",[2381,2435],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1250,1268],"[success, history, order._id, dispatch]",[1558,1596],"[user, userId, successUpdate, history, dispatch]"]